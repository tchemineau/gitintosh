#!/bin/bash

# --------------------------------------------------------------------------------
# CONFIGURATION
# --------------------------------------------------------------------------------

# Do not modify the following constants
DIRNAME="$(dirname "$0")"
SCRIPTNAME="$(basename "$0")"
FILENAME="${SCRIPTNAME%.*}"
FILEPATH="$(cd $DIRNAME 2>/dev/null && /bin/pwd)/$SCRIPTNAME"
ROOTDIR="$(dirname "$(dirname "$FILEPATH")")"
CONFDIR="$ROOTDIR/conf"

# Get the path to Git Shell
GIT_SHELL_PATH="$(which git-shell)"

# SSH options
SSH_OPTIONS="no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty"

# The user database file
USER_FILE_PATH="$CONFDIR"/user

# --------------------------------------------------------------------------------
# Internal parameters
# --------------------------------------------------------------------------------

# Initialize the GIT repository
[ -n "$GIT_REPO" ] || GIT_REPO=""

# Initialize the GIT user
[ -n "$GIT_USER" ] || GIT_USER=""

# --------------------------------------------------------------------------------
# Functions
# --------------------------------------------------------------------------------

# ----
# Grant access by verifying user database and repository path
#
CHECK_ACCESS ()
{
	# Get the email
	local user=$1

	# Get the repository
	local repo=$2

	# Check if user and repo is set
	if [ -z "$user" || -z "$repo" ]; then
		echo "No user or repo set"
		exit 1
	fi

	# Check access to this repository
	local granted="$(grep -i $user $USER_FILE_PATH | grep $repo)"

	# If not granted, exit
	if [ -z "$granted" ]; then
		echo "User is not allowed to access to this repository"
		exit 1
	fi
}

# ----
# Check root
#
CHECK_ROOT ()
{
	if [[ $UID -ne 0 ]]; then
		echo "Sorry, but this particular command needs to be run as root."
		exit 1
	fi
}

# ----
# Link client
# Based on Dazzle link_client code
# @see https://github.com/hbons/Dazzle/
#
LINK_CLIENT ()
{
	CHECK_ROOT

	# Ask the user for the link code with a prompt
	echo "Paste the contents of ${BOLD}\"~/SparkleShare/Your Name's link code.txt\"${NORMAL}"
	echo "(found on the client) into the field below and press ${BOLD}<ENTER>${NORMAL}."
	echo
	echo -n " ${BOLD}Link code: ${NORMAL}"
	read LINK_CODE

	# Ask the user mail address
	if [ -z "$GIT_USER" ]; then
		echo "Enter the email address of the user"
		echo
		echo -n " ${BOLD}Email: ${NORMAL}"
		read GIT_USER
	fi

	# Link user
	if [ ${#LINK_CODE} -ge 256 ]; then

		echo 'command="GIT_USER='$GIT_USER' '$FILEPATH' exec",'$SSH_OPTIONS' '$LINK_CODE >> /home/storage/.ssh/authorized_keys

		echo
		echo "${BOLD}The client with this link code can now access projects.${NORMAL}"
		echo "Now, edit $USER_FILE_PATH to grant access."
		echo

	else
		echo "${BOLD}Not a valid link code...${NORMAL}"
		exit 1
	fi
}

# ----
# Parse the GIT command
#
PARSE_GIT_COMMAND ()
{
	# This will store the fact that we should grab repo
	local isrepo=1

	# Set the GIT command
	local gitcmd="$(echo "$SSH_ORIGINAL_COMMAND" | cut -d' ' -f1)"

	# Check if we have to grab repo
	case "$gitcmd" in
		"git-receive-pack")
			isrepo=0;;
		"git-upload-pack")
			isrepo=0;;
	esac

	# Grab repo if necessary
	if [ $isrepo -eq 0 ]; then
		GIT_REPO="$(echo $SSH_ORIGINAL_COMMAND | cut -d' ' -f2 | sed -e "s/'//g")"
	fi
}

# ----
# Run into git shell mode
#
RUN_GIT_SHELL ()
{
	# Check access if user and repo is set
	if [ -n "$GIT_USER" -a -n "$GIT_REPO" ]; then
		CHECK_ACCESS $GIT_USER $GIT_REPO
	fi

	# If here, CHECK_ACCESS passed: launch the git shell command
	exec $GIT_SHELL_PATH -c "$SSH_ORIGINAL_COMMAND"
}

# ----
# Show help
#
SHOW_HELP ()
{
	echo
	echo "Usage: $FILENAME [COMMAND] [GIT_USER=...]"
	echo
	echo "Available commands are:"
	echo
	echo "  exec    exec a git command within a particular user context"
	echo "  link    link a client with a particular email address"
	echo
}

# --------------------------------------------------------------------------------
# Parse the command line and run appropriate action
# --------------------------------------------------------------------------------

case $1 in

	# Execute into git-shell mode
	exec)
		PARSE_GIT_COMMAND
		RUN_GIT_SHELL
		;;

	# Link client
	link)
		LINK_CLIENT
		;;

	# Show help
	*|help)
		SHOW_HELP
		;;

esac


